#
# http://travis-ci.org configuration file for openMVG
#

language: cpp

compiler:
  - gcc
  #- clang: #Consider clang later, since cereal does not build fine on the clang CI version
  #  - "3.3"

sudo: false

addons:
  apt:
    sources:
      - boost-latest
      - ubuntu-toolchain-r-test
    packages:
      - cmake
      - libeigen3-dev
      - libboost1.55-all-dev
      - lcov
      - libpng-dev
      - libjpeg8-dev
      - libtiff4-dev
      - libxxf86vm1
      - libxxf86vm1
      - libxxf86vm-dev
      - x11proto-xf86vidmode-dev
      - libxrandr-dev
      - g++-4.8

env:
  global:
    - NUM_CPU="`grep processor /proc/cpuinfo | wc -l`"; echo $NUM_CPU
    - BUILD_TYPE="Release"
    - BUILD_SYSTEM="`uname -s`"
    - BUILD_PROCESSOR="`uname -p`"
    - OPENMVG_SOURCE=${TRAVIS_BUILD_DIR}/src
    - OPENMVG_BUILD=${TRAVIS_BUILD_DIR}/build
    - GT_TEST_SOURCE=${TRAVIS_BUILD_DIR}/gt_test
    # OPENCV
    - OPENCV_ROOT=${TRAVIS_BUILD_DIR}/opencv3
    - OPENCV_SOURCE=${OPENCV_ROOT}/source
    - OPENCV_CONTRIB=${OPENCV_ROOT}/contrib
    - OPENCV_BUILD=${OPENCV_ROOT}/build
    - OPENCV_INSTALL=${OPENCV_ROOT}/install

before_install:
 - gem install coveralls-lcov
 # OPENCV
 - mkdir --parent $OPENCV_SOURCE
 - mkdir --parent $OPENCV_CONTRIB
 - mkdir --parent $OPENCV_BUILD
 - mkdir --parent $OPENCV_INSTALL
 - if [ ! "$(ls -A $OPENCV_SOURCE)" ]; then git clone --recursive --branch 3.0.0 https://github.com/Itseez/opencv.git $OPENCV_SOURCE; fi
 - if [ ! "$(ls -A $OPENCV_CONTRIB)" ]; then git clone --branch 3.0.0 --depth 1  https://github.com/Itseez/opencv_contrib.git $OPENCV_CONTRIB; fi

install:
  # OPENCV
  - cd $OPENCV_BUILD
  - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$OPENCV_INSTALL -DOPENCV_EXTRA_MODULES_PATH=$OPENCV_CONTRIB/modules $OPENCV_SOURCE
  - make -j 16
  - make install
  - ls -l $OPENCV_INSTALL

before_script:
  - export CXX="g++-4.8"
  # Create build folder
  - mkdir $OPENMVG_BUILD
  - cd $OPENMVG_BUILD
  # Classic release build
  - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOpenMVG_BUILD_TESTS=ON -DOpenMVG_BUILD_EXAMPLES=ON -DOpenMVG_USE_BOOST=ON -DOpenMVG_USE_OPENCV=ON -DOpenCV_DIR=$OPENCV_INSTALL/share/OpenCV . $OPENMVG_SOURCE
  # Build for code coverage evaluation
  #- cmake -DOpenMVG_BUILD_COVERAGE=ON -DOpenMVG_BUILD_TESTS=ON -DOpenMVG_BUILD_EXAMPLES=ON . ../openMVG/src

script:
# limit GCC builds to a reduced number of thread for the virtual machine
  - make -j 2
# Perform unit tests only on GCC builds
  - if [ "$CC" = "gcc" ]; then make test; fi
# Perform benchmark through ground truth tests with many scenes
  - if [ ! "$(ls -A $GT_TEST_SOURCE)" ]; then git clone --branch dev https://github.com/caymard/SfM_quality_evaluation.git $GT_TEST_SOURCE; fi
  - cd $GT_TEST_SOURCE
  - git pull
  - python EvaluationLauncher.py -s "$OPENMVG_BUILD/$BUILD_SYSTEM-$BUILD_PROCESSOR-$BUILD_TYPE" -i Benchmarking_Camera_Calibration_2008/ -o ../output -r ../results.json > ../gt_log.log 2>&1
  - cat ../gt_log.log | tail
  - cat ../results.json
after_success:
  #- cd ../openMVG
  # If GCC: compute code coverage and export it to coveralls
  #- if [ "$CC" = "gcc" ];
  #  then
  #    lcov --directory ../build/openMVG --base-directory=./src --capture --output-file=coverage.info;
  #    lcov --remove coverage.info '/usr*' -o coverage.info;
  #    lcov --remove coverage.info '*_test.cpp*' -o coverage.info;
  #    lcov --remove coverage.info '*/third_party/*' -o coverage.info;
  #    lcov --remove coverage.info '*/src/dependencies/*' -o coverage.info;
  #    coveralls-lcov coverage.info;
  #  fi

cache:
  apt: true
  directories:
    - $OPENCV_SOURCE
    - $OPENCV_CONTRIB
    - $OPENCV_BUILD
    - $OPENCV_INSTALL
    - $GT_TEST_SOURCE