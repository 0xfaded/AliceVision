#
# http://travis-ci.org configuration file for openMVG
#

language: cpp

compiler:
  - gcc
  #- clang: #Consider clang later, since cereal does not build fine on the clang CI version
  #  - "3.3"

sudo: false

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      #- cmake # Manually install latest version (>=3.0)
      - lcov
      - libpng-dev
      - libjpeg8-dev
      - libtiff4-dev
      - libxxf86vm1
      - libxxf86vm-dev
      - x11proto-xf86vidmode-dev
      - libxrandr-dev
      - g++-4.8
      - libatlas-base-dev

env:
  global:
    - NUM_CPU="`grep processor /proc/cpuinfo | wc -l`"; echo $NUM_CPU
    - BUILD_TYPE="Release"
    - BUILD_SYSTEM="`uname -s`"
    - BUILD_PROCESSOR="`uname -p`"
    - OPENMVG_SOURCE=${TRAVIS_BUILD_DIR}/src
    - OPENMVG_BUILD=${TRAVIS_BUILD_DIR}/build
    # GT datasets for tests
    - GT_TEST_ROOT=${TRAVIS_BUILD_DIR}/gt_test
    - GT_TEST_SOURCE=${GT_TEST_ROOT}/gt_source
    - GT_TEST_RESULTS=${GT_TEST_ROOT}/result.json
    - GT_TEST_OUTPUT=${GT_TEST_ROOT}/gt_output
    # CMAKE
    - CMAKE_VERSION_SHORT=3.4
    - CMAKE_VERSION=3.4.1
    - CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION_SHORT}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
    - CMAKE_ROOT=${TRAVIS_BUILD_DIR}/cmake-${CMAKE_VERSION}
    - CMAKE_SOURCE=${CMAKE_ROOT}/source
    - CMAKE_INSTALL=${CMAKE_ROOT}/install
    # OPENCV
    - OPENCV_VERSION=3.0.0
    - OPENCV_ROOT=${TRAVIS_BUILD_DIR}/opencv-${OPENCV_VERSION}
    - OPENCV_SOURCE=${OPENCV_ROOT}/source
    - OPENCV_CONTRIB=${OPENCV_ROOT}/contrib
    - OPENCV_BUILD=${OPENCV_ROOT}/build
    - OPENCV_INSTALL=${OPENCV_ROOT}/install
    # OPENGV
    - OPENGV_VERSION=dev
    - OPENGV_ROOT=${TRAVIS_BUILD_DIR}/opengv-${OPENGV_VERSION}
    - OPENGV_SOURCE=${OPENGV_ROOT}/source
    - OPENGV_BUILD=${OPENGV_ROOT}/build
    - OPENGV_INSTALL=${OPENGV_ROOT}/install
    # EIGEN
    - EIGEN_VERSION=3.2.8
    - EIGEN_INSTALL=${TRAVIS_BUILD_DIR}/eigen-${EIGEN_VERSION}
    # BOOST
    - BOOST_VERSION=1.55.0
    - BOOST_VERSION_FILENAME=1_55_0
    - BOOST_ROOT=${TRAVIS_BUILD_DIR}/boost-${BOOST_VERSION}
    - BOOST_SOURCE=${BOOST_ROOT}/source
    - BOOST_INSTALL=${BOOST_ROOT}/install
    # SUITESPARSE
    - SS_VERSION=4.5.3
    - SS_ROOT=${TRAVIS_BUILD_DIR}/suitesparse-${SS_VERSION}
    - SS_SOURCE=${SS_ROOT}/SuiteSparse
    # CERES
    - CERES_VERSION=1.11.0
    - CERES_ROOT=${TRAVIS_BUILD_DIR}/ceres-${CERES_VERSION}
    - CERES_SOURCE=${CERES_ROOT}/source
    - CERES_BUILD=${CERES_ROOT}/build
    - CERES_INSTALL=${CERES_ROOT}/install
    - SS_INSTALL=${SS_ROOT}/install

before_install:
 - date -u
 - uname -a
 - if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
     lsb_release -a;
   elif [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
     sw_vers -productVersion;
   fi
 - ccache -s
 - gem install coveralls-lcov
 # CMAKE most recent version
 - >
    if [ "$(ls -A ${CMAKE_INSTALL})" ]; then
      echo "CMake found in cache.";
    else
      mkdir --parent ${CMAKE_SOURCE}
      mkdir --parent ${CMAKE_INSTALL}
      travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${CMAKE_INSTALL}
    fi
 - export PATH=${CMAKE_INSTALL}/bin:${PATH};
 - cmake --version
 # OPENCV
 - >
    if [ "$(ls -A $OPENCV_INSTALL)" ]; then
      echo "OpenCV found in cache.";
    else
      mkdir --parent $OPENCV_SOURCE
      mkdir --parent $OPENCV_CONTRIB
      mkdir --parent $OPENCV_BUILD
      mkdir --parent $OPENCV_INSTALL
      git clone --recursive --branch ${OPENCV_VERSION} --depth 1 https://github.com/Itseez/opencv.git $OPENCV_SOURCE;
      git clone --branch ${OPENCV_VERSION} --depth 1  https://github.com/Itseez/opencv_contrib.git $OPENCV_CONTRIB;
    fi
 # OPENGV
 - >
    if [ "$(ls -A $OPENGV_INSTALL)" ]; then
      echo "OPENGV found in cache.";
    else
      mkdir --parent $OPENGV_SOURCE
      mkdir --parent $OPENGV_BUILD
      mkdir --parent $OPENGV_INSTALL
      git clone --depth 1 https://github.com/laurentkneip/opengv.git $OPENGV_SOURCE;
    fi
 # EIGEN
 - >
    if [ "$(ls -A $EIGEN_INSTALL)" ]; then
      echo "Eigen found in cache.";
    else
      mkdir --parent $EIGEN_INSTALL
      hg clone -r ${EIGEN_VERSION} https://bitbucket.org/eigen/eigen/ $EIGEN_INSTALL;
    fi 
 # BOOST
 - >
    if [ "$(ls -A $BOOST_INSTALL)" ]; then
      echo "Boost found in cache.";
    else
      mkdir --parent $BOOST_SOURCE
      mkdir --parent $BOOST_INSTALL
      travis_retry wget https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION_FILENAME}.tar.gz;
      tar -xf boost_${BOOST_VERSION_FILENAME}.tar.gz;
      cp -r boost_${BOOST_VERSION_FILENAME}/* $BOOST_SOURCE;
    fi
 # SUITESPARSE
 - >
    if [ "$(ls -A $SS_INSTALL)" ]; then
      echo "SuiteSparse found in cache.";
    else
      cd $SS_ROOT;
      mkdir --parent $SS_INSTALL;
      travis_retry wget http://faculty.cse.tamu.edu/davis/SuiteSparse/SuiteSparse-${SS_VERSION}.tar.gz;
      tar -xf SuiteSparse-${SS_VERSION}.tar.gz;
    fi
 # CERES
 - >
    if [ "$(ls -A $CERES_INSTALL)" ]; then
      echo "Ceres found in cache.";
    else
      mkdir --parent $CERES_SOURCE
      mkdir --parent $CERES_BUILD
      mkdir --parent $CERES_INSTALL
      travis_retry wget http://ceres-solver.org/ceres-solver-${CERES_VERSION}.tar.gz;
      tar -xf ceres-solver-${CERES_VERSION}.tar.gz;
      cp -r ceres-solver-${CERES_VERSION}/* $CERES_SOURCE;
    fi

install:
  # OPENGV
  - >
     if [ ! "$(ls -A $OPENGV_INSTALL)" ]; then
       cd $OPENGV_BUILD
       cmake \
         -DCMAKE_BUILD_TYPE=Release \
         -DCMAKE_INSTALL_PREFIX=$OPENGV_INSTALL \
         -DINSTALL_OPENGV=ON \
         -DEIGEN_INCLUDE_DIR=$EIGEN_INSTALL \
         $OPENGV_SOURCE;
     make -j 2 > null;
     make install;
     fi
  # OPENCV
  - >
     if [ ! "$(ls -A $OPENCV_INSTALL)" ]; then
       cd $OPENCV_BUILD
       cmake \
         -DCMAKE_BUILD_TYPE=Release \
         -DCMAKE_INSTALL_PREFIX=$OPENCV_INSTALL \
         -DOPENCV_EXTRA_MODULES_PATH=$OPENCV_CONTRIB/modules \
         $OPENCV_SOURCE;
     make -j 2 > null;
     make install;
     fi
  # BOOST
  - >
     if [ ! "$(ls -A $BOOST_INSTALL)" ]; then
       cd $BOOST_SOURCE
       ./bootstrap.sh --with-libraries=filesystem,program_options,graph,serialization,thread,log --prefix=$BOOST_INSTALL;
       ./b2 link=shared install > null;
     fi
  # SUITESPARSE
  - >
     if [ ! "$(ls -A $SS_INSTALL)" ]; then
       cd $SS_SOURCE;
       make -j 2 > null;
       cp -r include $SS_INSTALL;
       cp -r lib $SS_INSTALL;
     fi
  # CERES
  - >
     if [ ! "$(ls -A $CERES_INSTALL)" ]; then
       cd $CERES_BUILD
       cmake \
         -DCMAKE_INSTALL_PREFIX=$CERES_INSTALL \
         -DEIGEN_INCLUDE_DIR=$EIGEN_INSTALL \
         -DSUITESPARSE_INCLUDE_DIR_HINTS=$SS_INSTALL/include \
         -DSUITESPARSE_LIBRARY_DIR_HINTS=$SS_INSTALL/lib \
         -DMINIGLOG=ON \
         $CERES_SOURCE;
     make -j 2 > null;
     make install;
     fi

before_script:
  - export CXX="g++-4.8"
  # Create build folder
  - mkdir $OPENMVG_BUILD
  - cd $OPENMVG_BUILD
  # Classic release build
  - >
     cmake \
       -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
       -DOpenMVG_BUILD_TESTS=ON \
       -DOpenMVG_BUILD_EXAMPLES=ON \
       -DOpenMVG_USE_OPENCV=ON \
       -DOpenCV_DIR=$OPENCV_INSTALL/share/OpenCV \
       -DOpenMVG_USE_OPENGV=ON \
       -DOPENGV_DIR=$OPENGV_INSTALL \
       -DOpenMVG_USE_BOOST=ON \
       -DOpenMVG_USE_CCTAG=OFF \
       -DBOOST_NO_CXX11=ON \
       -DOpenMVG_USE_INTERNAL_CERES=OFF \
       -DCeres_DIR=$CERES_INSTALL/share/Ceres \
       -DEIGEN_INCLUDE_DIR_HINTS=$EIGEN_INSTALL \
       -DBOOST_ROOT=$BOOST_INSTALL \
       . $OPENMVG_SOURCE
  # Build for code coverage evaluation
  #- cmake -DOpenMVG_BUILD_COVERAGE=ON -DOpenMVG_BUILD_TESTS=ON -DOpenMVG_BUILD_EXAMPLES=ON . ../openMVG/src

script:
# limit GCC builds to a reduced number of thread for the virtual machine
  - make -j 2 VERBOSE=1
# Perform unit tests only on GCC builds
  - if [ "$CC" = "gcc" ]; then make test; fi
# Perform benchmark through ground truth tests with many scenes
  - >
    if [ "$(ls -A $GT_TEST_SOURCE)" ]; then
      echo "Evaluation benchmark found in cache.";
    else
      git clone --branch master https://github.com/poparteu/SfM_quality_evaluation.git $GT_TEST_SOURCE;
    fi
  - cd $GT_TEST_SOURCE
  - git pull
  - python EvaluationLauncher.py -s "$OPENMVG_BUILD/$BUILD_SYSTEM-$BUILD_PROCESSOR-$BUILD_TYPE" -i Benchmarking_Camera_Calibration_2008/ -o ${GT_TEST_OUTPUT} -r ${GT_TEST_RESULTS} > ../gt_log.log 2>&1
  - cat ../gt_log.log | tail -n 150
  - cat ${GT_TEST_RESULTS}
# Return to root and remove GT huge files to avoid cache problems
  - cd $TRAVIS_BUILD_DIR
  - rm -rf $GT_TEST_SOURCE
  - rm -rf $GT_TEST_OUTPUT

after_success:
  - du -hs $OPENCV_INSTALL
  #- cd ../openMVG
  # If GCC: compute code coverage and export it to coveralls
  #- if [ "$CC" = "gcc" ];
  #  then
  #    lcov --directory ../build/openMVG --base-directory=./src --capture --output-file=coverage.info;
  #    lcov --remove coverage.info '/usr*' -o coverage.info;
  #    lcov --remove coverage.info '*_test.cpp*' -o coverage.info;
  #    lcov --remove coverage.info '*/third_party/*' -o coverage.info;
  #    lcov --remove coverage.info '*/src/dependencies/*' -o coverage.info;
  #    coveralls-lcov coverage.info;
  #  fi

# Before uploading the new cache archive
before_cache:
  - ccache -s

cache:
  # Enable compiler cache
  ccache: true
  # Caching builded dependencies
  directories:
    - $CMAKE_INSTALL
    - $OPENCV_INSTALL
    - $OPENGV_INSTALL
    - $CERES_INSTALL
    - $BOOST_INSTALL
    - $EIGEN_INSTALL
    - $SS_INSTALL
