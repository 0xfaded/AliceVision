
# Copyright (c) 2015 Pierre MOULON.

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

# Config file for OpenMVG library - Find OpenMVG & dependencies.
#
# This file is used by CMake when FIND_PACKAGE( OpenMVG ) is invoked (and
# the directory containing this file is present in CMAKE_MODULE_PATH).
#
# This module defines the following variables:
#
# OPENMVG_FOUND: True if OpenMVG has been successfully found.
#
# OPENMVG_VERSION: Version of OpenMVG found.
#
# OPENMVG_INCLUDE_DIRS: Include directories for OpenMVG and the
#                       dependencies which appear in the OpenMVG public
#                       API and are thus required to use OpenMVG.
#
# OPENMVG_LIBRARIES: Libraries for OpenMVG and all
#                    dependencies against which OpenMVG was
#                    compiled.

# Called if we failed to find Ceres or any of it's required dependencies,
# unsets all public (designed to be used externally) variables and reports
# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.
macro(OPENMVG_REPORT_NOT_FOUND REASON_MSG)
  # FindPackage() only references Ceres_FOUND, and requires it to be
  # explicitly set FALSE to denote not found (not merely undefined).
  set(OPENMVG_FOUND FALSE)
  unset(OPENMVG_INCLUDE_DIRS)
  unset(OPENMVG_LIBRARIES)

  # Reset the CMake module path to its state when this script was called.
  set(CMAKE_MODULE_PATH ${CALLERS_CMAKE_MODULE_PATH})

  # Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by
  # FindPackage() use the camelcase library name, not uppercase.
  if(OPENMVG_FIND_QUIETLY)
    message(STATUS "Failed to find OPENMVG - " ${REASON_MSG} ${ARGN})
  else(OPENMVG_FIND_REQUIRED)
    message(FATAL_ERROR "Failed to find OPENMVG - " ${REASON_MSG} ${ARGN})
  else()
    # Neither QUIETLY nor REQUIRED, use SEND_ERROR which emits an error
    # that prevents generation, but continues configuration.
    message(SEND_ERROR "Failed to find OPENMVG - " ${REASON_MSG} ${ARGN})
  endif()
  return()
endmacro(OPENMVG_REPORT_NOT_FOUND)

## Public dependencies that needs to be propagated
include(CMakeFindDependencyMacro)

set(OPENMVG_USE_INTERNAL_CERES @OPENMVG_USE_INTERNAL_CERES@)

if(OPENMVG_USE_INTERNAL_CERES)
  set(Ceres_DIR @CMAKE_INSTALL_PREFIX@/share/Ceres/)
else()
  set(Ceres_DIR @Ceres_DIR@)
endif()
find_dependency(Ceres)

# whether it is built with CCTags
set(OPENMVG_USE_CCTAG @OPENMVG_USE_CCTAG@)

if(OPENMVG_USE_CCTAG)
  set(CCTag_DIR @CCTag_DIR@)
  find_dependency(CCTag 1.0.0)
endif()

# whether it is built with CCTags
set(OPENMVG_USE_POPSIFT @OPENMVG_USE_POPSIFT@)

if(OPENMVG_USE_POPSIFT)
  find_dependency(PopSift 1.0.0)
endif()


# whether it is built with CCTags
set(OPENMVG_USE_OPENCV @OPENMVG_USE_OPENCV@)

if(OPENMVG_USE_OPENCV)
  set(OpenCV_DIR @OpenCV_DIR@)
  find_dependency(OpenCV)
endif(OPENMVG_USE_OPENCV)

set(OPENMVG_USE_OPENMP @OPENMVG_USE_OPENMP@)

if(OPENMVG_USE_OPENMP)
  find_dependency(OpenMP)
  # TODO: this would not be necessary if the flags were declared properly for each target
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif(OPENMVG_USE_OPENMP)

set(OPENMVG_USE_BOOST @OPENMVG_USE_BOOST@)
set(BOOST_NO_CXX11 @BOOST_NO_CXX11@)
if(BOOST_NO_CXX11)
 add_definitions(-DBOOST_NO_CXX11_SCOPED_ENUMS)
endif(BOOST_NO_CXX11)

# propagate other building options
set(OPENMVG_USE_OPENGV @OPENMVG_USE_OPENGV@)
set(OPENMVG_USE_ALEMBIC @OPENMVG_USE_ALEMBIC@)
set(OPENMVG_USE_LOG @OPENMVG_USE_LOG@)

# Set the version.
set(OPENMVG_VERSION @OPENMVG_VERSION@)

# Get the (current, i.e. installed) directory containing this file.
get_filename_component(CURRENT_CONFIG_INSTALL_DIR
  "${CMAKE_CURRENT_LIST_FILE}" PATH)

# Record the state of the CMake module path when this script was
# called so that we can ensure that we leave it in the same state on
# exit as it was on entry, but modify it locally.
set(CALLERS_CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})
# Reset CMake module path to the installation directory of this
# script.
set(CMAKE_MODULE_PATH ${CURRENT_CONFIG_INSTALL_DIR})

# Build the absolute root install directory as a relative path
get_filename_component(CURRENT_ROOT_INSTALL_DIR
  ${CMAKE_MODULE_PATH}/../../../ ABSOLUTE)
if(NOT EXISTS ${CURRENT_ROOT_INSTALL_DIR})
  OPENMVG_REPORT_NOT_FOUND(
    "OpenMVG install root: ${CURRENT_ROOT_INSTALL_DIR}, "
    "determined from relative path from OpenMVGConfig.cmake install location: "
    "${CMAKE_MODULE_PATH}, does not exist.")
endif(NOT EXISTS ${CURRENT_ROOT_INSTALL_DIR})

# Check if OpenMVG header is installed
if(NOT EXISTS ${CURRENT_ROOT_INSTALL_DIR}/include/openMVG/version.hpp)
  OPENMVG_REPORT_NOT_FOUND(
    "OpenMVG install root: ${CMAKE_MODULE_PATH}. "
    "Cannot find openMVG include files.")
endif(NOT EXISTS ${CURRENT_ROOT_INSTALL_DIR}/include/openMVG/version.hpp)

# Set the include directories for OpenMVG (itself) and all (potentially optional)
# dependencies with which OpenMVG was compiled.
set(OPENMVG_INCLUDE_DIRS "@OPENMVG_INCLUDE_DIRS@")

##### the libraries themselves come in via OpenMVGTargets-<release/debug>.cmake
# as link libraries rules as target.

# Import exported OpenMVG targets
set(OPENMVG_LIBRARIES @OPENMVG_LIBRARIES@)
include(${CURRENT_CONFIG_INSTALL_DIR}/OpenMVGTargets.cmake)

# As we use OPENMVG_REPORT_NOT_FOUND() to abort, if we reach this point we have
# found OpenMVG and all required dependencies.
message(STATUS "----")
message(STATUS "OpenMVG Find_Package")
message(STATUS "----")
message(STATUS "Found OpenMVG version: ${OPENMVG_VERSION}")
message(STATUS "Installed in: ${CURRENT_ROOT_INSTALL_DIR}")
message(STATUS "Used OpenMVG libraries: ${OPENMVG_LIBRARIES}")
message(STATUS "----")

set(OPENMVG_FOUND TRUE)

# Reset the CMake module path to its state when this script was called.
set(CMAKE_MODULE_PATH ${CALLERS_CMAKE_MODULE_PATH})

