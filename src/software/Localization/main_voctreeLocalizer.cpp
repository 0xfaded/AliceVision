/* 
 * File:   main_voctreeLocalizer.cpp
 * Author: sgaspari
 *
 * Created on September 12, 2015, 3:16 PM
 */
#include <openMVG/localization/localization.hpp>
#include <openMVG/sfm/pipelines/localization/SfM_Localizer.hpp>
#include <openMVG/image/image_io.hpp>
#include <openMVG/voctree/FeedProvider.hpp>

#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/path.hpp>
#include <boost/progress.hpp>
#include <boost/program_options.hpp> 

#include <iostream>
#include <string>

#define POPART_COUT(x) std::cout << x << std::endl
#define POPART_CERR(x) std::cerr << x << std::endl


namespace bfs = boost::filesystem;
namespace po = boost::program_options;

using namespace openMVG;

static const int DIMENSION = 128;


int main(int argc, char** argv)
{
  int numResults = 4; //< number of best matching images to retrieve from the database
  int numCommonViews = 3; //< number minimum common images in which a point must be seen to be used in cluster tracking
  std::string calibFile; //< the calibration file
  std::string sfmFilePath; ///< the OpenMVG .json data file
  std::string descriptorsFolder; ///< the OpenMVG .json data file
  std::string vocTreeFilepath; ///< the vocabulary tree file
  std::string weightsFilepath; ///< the vocabulary tree weights file
  std::string mediaFilepath; ///< the media file to localize
  std::string exportFilepath = "trackedcameras.json"; //!< the export file

  po::options_description desc(
                               "This program takes as input a media (image, image sequence, video) and a database (voctree, 3D structure data) \n"
                               "and returns for each frame a pose estimation for the camera.");
  desc.add_options()
          ("help,h", "Print this message")
          ("results,r", po::value<int>(&numResults)->default_value(numResults), "Number of images to retrieve in database")
          ("commonviews,", po::value<int>(&numCommonViews)->default_value(numCommonViews), "Number of minimum images in which a point must be seen to be used in cluster tracking")
          ("calibration,c", po::value<std::string>(&calibFile)/*->required( )*/, "Calibration file")
          ("voctree,t", po::value<std::string>(&vocTreeFilepath)->required(), "Filename for the vocabulary tree")
          ("weights,w", po::value<std::string>(&weightsFilepath), "Filename for the vocabulary tree weights")
          ("sfmdata,d", po::value<std::string>(&sfmFilePath)->required(), "The sfm_data.json kind of file generated by OpenMVG [it could be also a bundle.out to use an older version of OpenMVG]")
          ("siftPath,s", po::value<std::string>(&descriptorsFolder), "Folder containing the .desc. If not provided, it will be assumed to be parent(sfmdata)/matches [for the older version of openMVG it is the list.txt]")
          ("mediafile,m", po::value<std::string>(&mediaFilepath)->required(), "The folder path or the filename for the media to track")
          ("export,e", po::value<std::string>(&exportFilepath)->default_value(exportFilepath), "Filename for the SfM_Data export file (where camera poses will be stored). Default : trackedcameras.json If Alambic is enable it will also export an .abc file of the scene with the same name");

  po::variables_map vm;

  try
  {
    po::store(po::parse_command_line(argc, argv, desc), vm);

    if(vm.count("help") || (argc == 1))
    {
      POPART_COUT(desc);
      return EXIT_SUCCESS;
    }

    po::notify(vm);
  }
  catch(boost::program_options::required_option& e)
  {
    POPART_CERR("ERROR: " << e.what() << std::endl);
    POPART_COUT("Usage:\n\n" << desc);
    return EXIT_FAILURE;
  }
  catch(boost::program_options::error& e)
  {
    POPART_CERR("ERROR: " << e.what() << std::endl);
    POPART_COUT("Usage:\n\n" << desc);
    return EXIT_FAILURE;
  }
 
  // init the localizer
  localization::VoctreeLocalizer localizer;
  bool isInit = localizer.init(sfmFilePath, descriptorsFolder, vocTreeFilepath, weightsFilepath);
  
  if(!isInit)
  {
    POPART_CERR("ERROR while initializing the localizer!");
    return EXIT_FAILURE;
  }
  
  // create the feedProvider
  dataio::FeedProvider feed(mediaFilepath, calibFile);
  if(!feed.isInit())
  {
    POPART_CERR("ERROR while initializing the FeedProvider!");
    return EXIT_FAILURE;
  }
  
  image::Image<unsigned char> imageGray;
  cameras::Pinhole_Intrinsic_Radial_K3 queryIntrinsics;
  bool hasIntrinsics = false;
  geometry::Pose3 cameraPose;
  
  while(feed.next(imageGray, queryIntrinsics, hasIntrinsics))
  {
  
    sfm::Image_Localizer_Match_Data matchData;
    localizer.Localize(imageGray, 
                       queryIntrinsics, 
                       numResults, 
                       cameraPose, 
                       false/*useGuidedMatching*/, 
                       hasIntrinsics/*useInputIntrinsics*/, 
                       true/*refineIntrinsics*/, 
                       &matchData);
    // save data
  }
  
}
